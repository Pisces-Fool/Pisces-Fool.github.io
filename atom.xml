<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端小小白~哦吼~</title>
  
  <subtitle>Don&#39;t lose My Heart</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-02T08:00:07.696Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jerry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>入职初体验</title>
    <link href="http://yoursite.com/2018/02/02/%E5%85%A5%E8%81%8C%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/02/02/入职初体验/</id>
    <published>2018-02-02T07:23:55.030Z</published>
    <updated>2018-02-02T08:00:07.696Z</updated>
    
    <content type="html"><![CDATA[<p>作为一只刚入职的小萌新，刚进入公司的时候还是一脸懵逼的，在工位上坐了两天学了下公司的业务流程和工具后，就被砸了个项目过来练手，心里也是比较激动的，相比看文档，我觉得还是直接上手写东西，来的直接，学的快。。毕竟要“知行合一”嘛，“实践是检验真理的唯一标准”。。哈哈，那我就首个项目的一些小问题做个简单的总结，希望以后也能有个好习惯，每周三省吾身—不是Wednesday啊。。</p><blockquote><ul><li>关于微信的openId问题</li><li>关于html2canvas的绘制问题</li><li>公司的框架使用问题</li><li>其他边角小问题</li><li>小感慨</li></ul></blockquote><p>废话不多说了，开始开始：</p><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h3 id="关于微信的openId问题"><a href="#关于微信的openId问题" class="headerlink" title="关于微信的openId问题"></a><strong>关于微信的openId问题</strong></h3><p>由于前一段时间，微信的openId是存在cookie里的，受到过攻击，所以后台对openId进行了对应的加密处理，并在一定的生命周期里进行更新，这就让我们前端访问的时候，传递的参数openId会出现滞后，所以这时后台会有个跳转地址，让用户去获取最新的openId，这就造成了一个问题，前端在请求的时候，会导致页面重新刷新一次。所以，在页面渲染的时候，就有两步判断，一个是判断有无openId，第二个判断是否失效。</p><h3 id="关于html2canvas的绘制"><a href="#关于html2canvas的绘制" class="headerlink" title="关于html2canvas的绘制"></a><strong>关于html2canvas的绘制</strong></h3><p>项目里有个截图需求，需要把html页面自动截图，供用户分享并识别二维码。所以我就采用了html2canvas这个工具，还是相当不错的，只是在开始的时候踩了个小坑。<br>html2canvas绘制出来的图片没有把微信头像绘制上。。。也就是头没了。。。没了。。了。<br>这个问题想了好久，最后才发现，这时跨域问题，因为微信头像是存在微信服务器上的，难以获取到。所以，需要我们后台合作一下，首先我们把微信的图片以Base64发给后台，后台处理后我们再获取并绘制，然后我们再对整个html进行第二次绘制，形成图片。<br>这里面遇到了另一个问题，如果将toast弹窗加到html2canvas的回调里，我们难以控制toast的展示时间并有可能把toast也放到截图里了，因为canvas绘制需要看手机性能以及网络（吧~~没验证！）所以，我就把toast加到最外面，等他消失后，我再进行绘制。</p><p><a href="http://html2canvas.hertzen.com/getting-started" target="_blank" rel="noopener">html2canvas文档</a><br>1.可以npm 安装，并用import导入。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html2canvas(<span class="built_in">document</span>.body).then(<span class="function"><span class="keyword">function</span>(<span class="params">canvas</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(canvas);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong><br>    1.html2canvas 通过解析元素实际的样式来生成 canvas 图片内容，因此它对元素实际的布局和视觉显示有要求。如果要完整截图，最好将元素从文档流中独立出来（例如 position:absolute）<br>    2.默认生成的 canvas 图片在 retina 设备上显示很模糊，处理成 2 倍图能解决这个问题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w = $(<span class="string">"#code"</span>).width();  </span><br><span class="line"><span class="keyword">var</span> h = $(<span class="string">"#code"</span>).height();<span class="comment">//要将 canvas 的宽高设置成容器宽高的 2 倍  </span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);  </span><br><span class="line">    canvas.width = w * <span class="number">2</span>;  </span><br><span class="line">    canvas.height = h * <span class="number">2</span>;  </span><br><span class="line">    canvas.style.width = w + <span class="string">"px"</span>;  </span><br><span class="line">    canvas.style.height = h + <span class="string">"px"</span>;  </span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);<span class="comment">//然后将画布缩放，将图像放大两倍画到画布上  </span></span><br><span class="line">    context.scale(<span class="number">2</span>,<span class="number">2</span>);  </span><br><span class="line">    html2canvas(<span class="built_in">document</span>.querySelector(<span class="string">"#code"</span>), &#123;</span><br><span class="line">    canvas: canvas,          </span><br><span class="line">    onrendered: <span class="function"><span class="keyword">function</span>(<span class="params">canvas</span>) </span>&#123;                </span><br><span class="line">    ...</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="公司的框架使用问题"><a href="#公司的框架使用问题" class="headerlink" title="公司的框架使用问题"></a><strong>公司的框架使用问题</strong></h3><ol><li>在框架的js中，不能用className来表示，jsx中不识别，或者并不能显示出class同名的类名样式。</li><li>点击时，如果弹出层只是秒现，说明点透了，加个settimeout延时就好。</li><li><p>这个可以检测是否有图像，没图像的话，就用默认的图像，这里还可以采用透明图片来起到没有图片加载的作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&#123;!!<span class="keyword">this</span>.menusList[<span class="number">7</span>] ? <span class="keyword">this</span>.menusList[<span class="number">7</span>].wechatHeadImg : <span class="keyword">this</span>.defaultImg&#125;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>onClick={this.clickOrder}，–this.clickOrder(),表示立即执行。表示直接传event本身，后面可以直接采用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clickOrder = <span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">         alert( $(t.target).html() );       </span><br><span class="line"> <span class="keyword">this</span>.update();  <span class="comment">//模板更新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>如果，需要传其他参数，则需要再包一层函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()=&gt;&#123; <span class="keyword">this</span>.clickOrder( e,data ) &#125;</span><br></pre></td></tr></table></figure></p><h3 id="其他的边角小问题"><a href="#其他的边角小问题" class="headerlink" title="其他的边角小问题"></a><strong>其他的边角小问题</strong></h3><ol><li>元素hidden和display：none，不一样，hidden的元素用display:block，是显示不出来的。</li><li>在微信账号里，有个昵称一般会出现emoji表情，这时需要进行一定的加解密操作。在URL里获取的值需要先进行decodeURIComponent()，传给后台值的时候，先要进行Base64加密，获取的时候就需要对应的Base64解密了。</li><li>部分坑爹机型（nubia，锤子等），会把网页中的img标签中的图片单独显示出来，<br>(1) 我们可以在外面建个盒子<code>&lt;a href=&quot;javascript:void(0)&quot;&gt;</code>来禁止默认响应。其他的例如按钮的图片，有onclick事件会直接执行onclick。<br>(2) 直接写在css样式里面，background来实现。</li></ol><h3 id="小感慨—碎碎念"><a href="#小感慨—碎碎念" class="headerlink" title="小感慨—碎碎念"></a><strong>小感慨</strong>—碎碎念</h3><p>刚进入公司，还有很多要学的，公司部门里大家都很友善，很热心，衷心地庆幸自己加入了这个有爱的family~~😄</p><p>以后有不足的，再补充吧~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一只刚入职的小萌新，刚进入公司的时候还是一脸懵逼的，在工位上坐了两天学了下公司的业务流程和工具后，就被砸了个项目过来练手，心里也是比较激动的，相比看文档，我觉得还是直接上手写东西，来的直接，学的快。。毕竟要“知行合一”嘛，“实践是检验真理的唯一标准”。。哈哈，那我就首个项目的一些小问题做个简单的总结，希望以后也能有个好习惯，每周三省吾身—不是Wednesday啊。。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;关于微信的openId问题&lt;/li&gt;
&lt;li&gt;关于html2canvas的绘制问题&lt;/li&gt;
&lt;li&gt;公司的框架使用问题&lt;/li&gt;
&lt;li&gt;其他边角小问题&lt;/li&gt;
&lt;li&gt;小感慨&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;废话不多说了，开始开始：&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>说说闭包吧~~</title>
    <link href="http://yoursite.com/2017/10/09/%E8%AF%B4%E8%AF%B4%E9%97%AD%E5%8C%85%E5%90%A7__/"/>
    <id>http://yoursite.com/2017/10/09/说说闭包吧__/</id>
    <published>2017-10-09T14:23:08.000Z</published>
    <updated>2018-02-05T06:41:15.942Z</updated>
    
    <content type="html"><![CDATA[<p>或许大家都会碰到人问，什么是闭包，怎么理解闭包。。其实吧，我感觉闭包，只言片语是说不清楚的，那我们就多说几句。。哈哈！~~</p><ul><li><p><strong>首先，我们要知道作用域链</strong><br>作用域链就像一个栈，执行上下文栈就是以全局作用域打底的，然后父级作用域，然后子级作用域，再然后子级的子级作用域。。。。一直到当前作用域。那么一般情况下，（也就是理想情况下）fn在执行完后，会销毁当前的作用域，也就是当前作用域弹出栈，其父级作用域变为当前作用域。一级一级的销毁，直到全局作用域。那我们的变量也是依托这个栈的，当前作用域没有的话，我们就一级一级地回溯寻找，找到赋值，没找到就undefined。这样也就形成了作用域链。（好通俗吧。。。）补充一句：这里‘到父级作用域中去取’，我觉得用‘要到<strong><em>创建</em></strong>这个函数的那个作用域中取值’更准确一点。</p></li><li><p>前面也说了，这是理想情况下。但，现实还是现实，没那么多理想。会出现，父级作用域并不能被销毁（因为他的变量还在父级作用域中被引用，销毁的话，父级作用域内将无法赋值）。这时也就是出现了–闭包。（千呼万唤始出来~~）</p><a id="more"></a><p>那我就在讲之前，讲讲他的最重要的表现形式吧</p></li></ul><ol><li>函数作为返回<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> function f1()&#123;</span><br><span class="line">var a =12;</span><br><span class="line">return function(x)&#123;</span><br><span class="line">x&gt;a?console.log(x):console.log(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">var f2 = f1();</span><br><span class="line">f2(9)    //12</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>函数作为参数被调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> var a =12,f1;</span><br><span class="line"> f1= function(x)&#123;</span><br><span class="line">x&gt;a?console.log(x):console.log(a);</span><br><span class="line">&#125;</span><br><span class="line">(function(fn)&#123;</span><br><span class="line">var a = 20;</span><br><span class="line">fn(1);</span><br><span class="line">&#125;)(f1);</span><br></pre></td></tr></table></figure><p>这两种情况都会形成<strong>闭包</strong>。<br>重点来了：因为执行函数时，返回的是一个函数。函数的特别之处在于可以创建一个独立的作用域。而正巧合的是，返回的这个函数体中，还有一个自由变量a要引用f1作用域下的f1()上下文环境中的a。因此，这个a不能被销毁，还依然存在与执行上下文栈中。<br>所以，这样就会造成闭包中会有多余的内容开销，要是数目多的话，有可能会造成内存泄漏哟~~</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;或许大家都会碰到人问，什么是闭包，怎么理解闭包。。其实吧，我感觉闭包，只言片语是说不清楚的，那我们就多说几句。。哈哈！~~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;首先，我们要知道作用域链&lt;/strong&gt;&lt;br&gt;作用域链就像一个栈，执行上下文栈就是以全局作用域打底的，然后父级作用域，然后子级作用域，再然后子级的子级作用域。。。。一直到当前作用域。那么一般情况下，（也就是理想情况下）fn在执行完后，会销毁当前的作用域，也就是当前作用域弹出栈，其父级作用域变为当前作用域。一级一级的销毁，直到全局作用域。那我们的变量也是依托这个栈的，当前作用域没有的话，我们就一级一级地回溯寻找，找到赋值，没找到就undefined。这样也就形成了作用域链。（好通俗吧。。。）补充一句：这里‘到父级作用域中去取’，我觉得用‘要到&lt;strong&gt;&lt;em&gt;创建&lt;/em&gt;&lt;/strong&gt;这个函数的那个作用域中取值’更准确一点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前面也说了，这是理想情况下。但，现实还是现实，没那么多理想。会出现，父级作用域并不能被销毁（因为他的变量还在父级作用域中被引用，销毁的话，父级作用域内将无法赋值）。这时也就是出现了–闭包。（千呼万唤始出来~~）&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>性能优化的浅析</title>
    <link href="http://yoursite.com/2017/09/24/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E6%B5%85%E6%9E%90/"/>
    <id>http://yoursite.com/2017/09/24/性能优化的浅析/</id>
    <published>2017-09-24T14:13:00.000Z</published>
    <updated>2018-02-05T06:15:15.211Z</updated>
    
    <content type="html"><![CDATA[<p>在不久前的面试中，一个动态加载li到ul里的题目，被问到性能优化的问题，一下把我问住了，就傻乎乎地回答：“每次循环结束的时候，把元素appendChild到ul里”。然后，面试官就点头，恩恩，好的。知道了。一看就知道，自己回到错了，回来后，就去各种查资料，现将一些总结如下，希望大家指正。</p><p>其实，这优化就是几个原则：</p><pre><code>1. 多使用内存，缓存。2. 减少cpu请求，减少网络。3. 页面渲染上，尽量快的把DOM展现出来。</code></pre><a id="more"></a><p>那围绕上面几点，就有这些优化方式:</p><pre><code>- 静态资源的压缩合并，多用缓存。- 多使用cdn（bootcdn之类的）--选就近的cdn可以减少网络耗时。- 使用ssr（sever side render）后端渲染数据，数据直接显示到html上，而不是通常的加载完后，再依靠ajax来渲染数据。</code></pre><p>在渲染呢，（把握dom操作的成本高，要快速的展示为主）</p><pre><code>- css放前，js放后面（主要是js有权改变dom结构并阻塞渲染，所以js要在渲染要放在body的后面）- 懒加载（图片懒加载、下拉刷新等等，后面会稍微讲一讲）- 减少dom查询，对dom作缓存（var nodeList =$(&apos;li&apos;),这里就是作缓存，以及后面用到for循环的时候，尽量避免$(&apos;li&apos;).length，要用nodeList.length）- 减少dom操作，多操作的尽量合并在一起执行。（就像前面说的，多个标签一起插入的时候，要是一个一个的话，会很耗成本的。具体方法后面会有介绍。）- 事件节流（在键盘事件keyup上会有体现，后面也会具体分析）</code></pre><p>懒加载：当访问一个页面的时候，先把img元素或是其他元素的背景图片路径替换成一张大小为1*1px图片的路径（这样就只需请求一次，俗称占位图），只有当图片出现在浏览器的可视区域内时，才设置图片正真的路径，让图片显示出来（一般放在data-src属性里，用时直接赋值到src属性里）。这就是图片懒加载。js判断其是否在可视区域，是监听滚动条的。（这个面试也被问到了。/(ㄒoㄒ)/~~）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var imgNum=document.getElementsByTagName(&apos;img&apos;).length;</span><br><span class="line">    var imgObj=document.getElementsByTagName(&quot;img&quot;);</span><br><span class="line">    var l=0;</span><br><span class="line"></span><br><span class="line">        window.onscroll=function()&#123;</span><br><span class="line">                var seeHeight = document.documentElement.clientHeight;</span><br><span class="line">                var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;</span><br><span class="line">                for(var i=l;i&lt;imgNum;i++)&#123;</span><br><span class="line">                    if(imgObj[i].offsetTop &lt; seeHeight + scrollTop)&#123;</span><br><span class="line">                        console.log(imgObj[i].getAttribute(&quot;src&quot;));</span><br><span class="line">                        console.log(imgObj[i].src );</span><br><span class="line">                        if(imgObj[i].getAttribute(&quot;src&quot;) == &quot;&quot;)&#123;</span><br><span class="line">                            imgObj[i].src = imgObj[i].getAttribute(&quot;data-src&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(imgObj[i].offsetTop &gt; seeHeight + scrollTop)&#123;</span><br><span class="line">                        l=i;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>这里再记录下jquery实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var l=0</span><br><span class="line">$(window).bind(&quot;scroll&quot;, function(event)&#123;</span><br><span class="line">                for(var i=l;i&lt;$(&quot;img&quot;).length;i++)&#123;</span><br><span class="line">                    if($(&quot;img&quot;).eq(i).offset().top &lt; parseInt($(window).height()) + parseInt($(window).scrollTop()))&#123;</span><br><span class="line">                        if($(&quot;img&quot;).eq(i).attr(&quot;src&quot;) == &quot;&quot;)&#123;</span><br><span class="line">                            var lazyloadsrc = $(&apos;img&apos;).eq(i).data(&quot;src&quot;);</span><br><span class="line">                            $(&quot;img&quot;).eq(i).attr(&quot;src&quot;,lazyloadsrc);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if($(&quot;img&quot;).eq(i).offset().top  &gt; parseInt($(window).height()) + parseInt($(window).scrollTop()))&#123;</span><br><span class="line">                        l=i;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><p>这里再插下预加载：图片预先加载到浏览器中，访问者便可顺利地在你的网站上冲浪，并享受到极快的加载速度。这对图片画廊及图片占据很大比例的网站来说十分有利，它保证了图片快速、无缝地发布，也可帮助用户在浏览你网站内容时获得更好的用户体验。<br>具体分析见：<a href="http://web.jobbole.com/86785/" title="别人的介绍" target="_blank" rel="noopener">预加载</a></p><p>两者的比较：见：<a href="http://www.jianshu.com/p/4876a4fe7731" target="_blank" rel="noopener">http://www.jianshu.com/p/4876a4fe7731</a><br><strong>1)概念：</strong><br>懒加载也叫延迟加载：JS图片延迟加载,延迟加载图片或符合某些条件时才加载某些图片。<br>预加载：提前加载图片，当用户需要查看时可直接从本地缓存中渲染。</p><p><strong>2)区别：</strong><br>两种技术的本质：两者的行为是相反的，一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。</p><p><strong>3)懒加载的意义及实现方式有</strong>：<br>意义：<br>懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。<br>实现方式：<br>1.第一种是纯粹的延迟加载，使用setTimeOut或setInterval进行加载延迟.<br>2.第二种是条件加载，符合某些条件，或触发了某些事件才开始异步下载。<br>3.第三种是可视区加载，即仅加载用户可以看到的区域，这个主要由监控滚动条来实现，一般会在距用户看到某图片前一定距离遍开始加载，这样能保证用户拉下时正好能看到图片。</p><p>4)预加载的意义及实现方式有：<br>意义:<br>预加载可以说是牺牲服务器前端性能，换取更好的用户体验，这样可以使用户的操作得到最快的反映。<br>实现方式：<br>实现预载的方法非常多，比如：用CSS和JavaScript实现预加载；仅使用JavaScript实现预加载；使用Ajax实现预加载。<br>常用的是new Image();设置其src来实现预载，再使用onload方法回调预载完成事件。只要浏览器把图片下载到本地，同样的src就会使用缓存，这是最基本也是最实用的预载方法。当Image下载完图片头后，会得到宽和高，因此可以在预载前得到图片的大小(方法是用记时器轮循宽高变化)。</p><p>这里接着我们开始的话题，接着将合并dom（<strong>减少dom操作</strong>）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var ListNode = document.getElementById(&apos;list&apos;);</span><br><span class="line">var frag = document.createDocumentFragment();//DOM片段</span><br><span class="line">var i,li;</span><br><span class="line">for(i=0;i&lt;10;i++)&#123;</span><br><span class="line">li.document.createElement(&apos;li&apos;);</span><br><span class="line">li.innerHTML = i +&apos;&lt;br/&gt;&apos;;</span><br><span class="line">frag.appendChild(li);//不会触发DOM操作</span><br><span class="line">&#125;</span><br><span class="line">ListNode.appendChild(frag)</span><br></pre></td></tr></table></figure></p><p>对于<strong>事件节流</strong>来说，就举一个keyup的例子。那就是没按一次按键就会触发一次，如果对于连续敲击键盘的事件来说，就是一个非常不流畅的事情。所以，我们就希望事件节流。再用户输入完一串后再去触发，这时加个延时就好，如果在这个延时里，还有keyup事件就不触发，直到延时结束。</p><p>那我最后再加一个<strong>页面渲染</strong>过程吧，</p><ol><li>根据html结构生成dom树。</li><li>根据css生成cssom。</li><li>将dom和cssom整合成renderTree。</li><li>根据renderTree开始渲染和展示内容。</li><li>其中，遇到脚本，会执行并阻塞渲染，遇到img会异步加载。</li></ol><p>暂时先记这些吧，后面有了解的也会补充。也希望大家多多指正，也让我加强学习。(<em>^__^</em>) </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在不久前的面试中，一个动态加载li到ul里的题目，被问到性能优化的问题，一下把我问住了，就傻乎乎地回答：“每次循环结束的时候，把元素appendChild到ul里”。然后，面试官就点头，恩恩，好的。知道了。一看就知道，自己回到错了，回来后，就去各种查资料，现将一些总结如下，希望大家指正。&lt;/p&gt;
&lt;p&gt;其实，这优化就是几个原则：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 多使用内存，缓存。
2. 减少cpu请求，减少网络。
3. 页面渲染上，尽量快的把DOM展现出来。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>this那些事儿</title>
    <link href="http://yoursite.com/2017/09/02/this%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    <id>http://yoursite.com/2017/09/02/this的那些事儿/</id>
    <published>2017-09-02T15:01:35.000Z</published>
    <updated>2018-02-05T06:38:47.795Z</updated>
    
    <content type="html"><![CDATA[<p>##关于this经常有些爱混淆，现就此总结下，便于以后查阅。<br>主要参考自 1.王福朋的博客：我比较喜欢他写博客的风格。<br><a href="http://www.cnblogs.com/wangfupeng1988/p/3988422.html" target="_blank" rel="noopener">http://www.cnblogs.com/wangfupeng1988/p/3988422.html</a><br>2.阮一峰大大的博客：<br><a href="http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html</a></p><p>this是Javascript语言的一个关键字。</p><p>它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，调用函数的那个对象。——这句话很精髓。<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">"哈哈"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">//undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//Window</span></span><br><span class="line">&#125;</span><br><span class="line">test1();</span><br></pre></td></tr></table></figure></p><p>这里比较好说明，undefined出现的原因，就是this指向的是window对象。他就是在window中被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testobj = &#123;</span><br><span class="line">    name:<span class="string">"jerry"</span>,</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);  <span class="comment">//jerry</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">testobj.fn();</span><br></pre></td></tr></table></figure><p>testobj的时候对fn()进行了调用，所以，这时的this是这个testobj对象。<br>这前面这样解释，确实没什么问题，且对大部分场合都试用，但在部分情境下，这里this又不受用了。<br>我就在调用testobj前面加个window. ，这里依然没有影响结果。所以这里的调用对象又要变通下，不是最终的window，而是testobj这一级对象。就此，我又去查了一番，现部分总结在下面：（不对，请指正！）<br>    情况1：如果this没有被上一级的对象所调用，那么this指向的就是window。<br>    情况2：如果this有被上一级的对象所调用，那么this指向的就是上一级的对象。那就是上个例子的testobj对象。<br>    情况3：如果this所在的函数包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testobj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:&#123;</span><br><span class="line">    a:<span class="number">12</span>,</span><br><span class="line">        fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">//12</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">testobj.b.fn();</span><br></pre></td></tr></table></figure></p><p>和这个比较：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var testobj = &#123;</span><br><span class="line">    a:1,</span><br><span class="line">    b:&#123;</span><br><span class="line">        a:12,</span><br><span class="line">        fn:function()&#123;</span><br><span class="line">            console.log(this.a); //undefined</span><br><span class="line">            console.log(this); //window</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var f = testobj.b.fn;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure></p><p>这是一个赋值定义，调用函数的问题。这就要弄懂，什么时候this被谁调用的问题。后面的例子虽然函数fn是被对象b所引用，但是在将fn赋值给变量j的时候并<strong>没有执行</strong>所以其指向的是window。前者是直接调用，所以两者不同，this.a也就不一样。<br>还有就是前面两位大神都讲过的，构造函数的this。我们来看看：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.content = <span class="string">"构造函数"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//Foo</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(obj.content); <span class="comment">//"构造函数"</span></span><br></pre></td></tr></table></figure></p><p>再看看这个，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.content = <span class="string">"构造函数"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//window</span></span><br><span class="line">&#125;</span><br><span class="line">Foo();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.content); <span class="comment">//"构造函数"</span></span><br></pre></td></tr></table></figure></p><p>这里主要就是看其构造函数有没有new对象出来，有的话，那this指向这个对象，没有，就作为普通函数调用，其指向全局window。<br>王大大也在第四点讲到了这一点。其中，这个例子有点难以理解，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var testobj = &#123;</span><br><span class="line">    a:1,</span><br><span class="line">    fn:function()&#123;</span><br><span class="line">        function f()&#123;</span><br><span class="line">console.log(this.a); //undefined</span><br><span class="line">            console.log(this); //window</span><br><span class="line">&#125;</span><br><span class="line">        f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">testobj.fn();</span><br></pre></td></tr></table></figure></p><p>开始还是有些许不明白，最后其实溯其本源看的话，f()就作为普通函数调用，所以还是指向window，那this.a也就取不到值了。<br>最后一种情况，call()和apply()、bind()会改变this指向。上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var testobj = &#123;</span><br><span class="line">    content:&quot;jerry&quot;,</span><br><span class="line">    fn:function()&#123;</span><br><span class="line">        console.log(this.content); //jerry</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var b = testobj.fn;</span><br><span class="line">b.call(testobj);</span><br></pre></td></tr></table></figure></p><p>也就是说，this就会指向那个对象。apply()和call()类似，只是后面传的值是数组。<br>bind()和以上都有所不同，主要是它的返回值不一样，它返回的是函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var testobj = &#123;</span><br><span class="line">    content:&quot;jerry&quot;,</span><br><span class="line">    fn:function()&#123;</span><br><span class="line">        console.log(this.content); //jerry</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var f = testobj.fn;</span><br><span class="line">var a = f.bind(testobj);</span><br><span class="line">a(); //执行a()后，才会打印。</span><br></pre></td></tr></table></figure></p><p>目前就总结出了，这么多，以后要是还有其他的，我再补充。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##关于this经常有些爱混淆，现就此总结下，便于以后查阅。&lt;br&gt;主要参考自 1.王福朋的博客：我比较喜欢他写博客的风格。&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/wangfupeng1988/p/3988422.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.cnblogs.com/wangfupeng1988/p/3988422.html&lt;/a&gt;&lt;br&gt;2.阮一峰大大的博客：&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;this是Javascript语言的一个关键字。&lt;/p&gt;
&lt;p&gt;它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，调用函数的那个对象。——这句话很精髓。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>apicloud开发app的总结</title>
    <link href="http://yoursite.com/2017/08/03/apicloud%E5%BC%80%E5%8F%91app%E7%9A%84%E6%80%BB%E7%BB%93%E3%80%82/"/>
    <id>http://yoursite.com/2017/08/03/apicloud开发app的总结。/</id>
    <published>2017-08-03T10:14:32.000Z</published>
    <updated>2018-02-05T06:25:48.101Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/fzddd7315/article/details/71079371" title="转apicloud总结" target="_blank" rel="noopener">转apicloud总结</a><br>暑假在做apicloud的app，这篇总结写的很好，记一下。</p><p>自己踩过的坑。。做个简单的记录：希望可以帮助有需要的人。</p><ol><li>手机加载日历，由于按业务需要，是要求动态加载input框个数，每个都可以点击触发日历。问题：动态添加进来的元素，点击并不能触发日历。解决：加载input框之前，加载日历插件的js和css，使事件生效。这是我封装的加载js和css的函数，直接调用就好。<a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadjscssfile</span>(<span class="params">filename, filetype</span>) </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (filetype) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"js"</span>:</span><br><span class="line"><span class="keyword">var</span> fileref = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">fileref.setAttribute(<span class="string">"type"</span>, <span class="string">"text/javascript"</span>);</span><br><span class="line">fileref.setAttribute(<span class="string">"src"</span>, filename);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(fileref);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'css'</span>:</span><br><span class="line"><span class="keyword">var</span> fileref = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</span><br><span class="line">fileref.setAttribute(<span class="string">"rel"</span>, <span class="string">"stylesheet"</span>);</span><br><span class="line">fileref.setAttribute(<span class="string">"type"</span>, <span class="string">"text/css"</span>);</span><br><span class="line">fileref.setAttribute(<span class="string">"href"</span>, filename);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(fileref);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>2.还是日历上，手机点击input时会默认出来键盘，挡住日历，不便用户操作。我查了一下资料，发现还是这个方法最好用，也很好理解。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var C_Items = document.getElementsByClassName(&quot;C_Item&quot;)</span><br><span class="line">for(var i= 0;i&lt;C_Items.length;i++)&#123;</span><br><span class="line">  C_Items[i].addEventListener(&apos;focus&apos;,function()&#123;</span><br><span class="line">      document.activeElement.blur();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>取出所有input，组成数组，当有focus()事件的时候，触发blur()，就好。<br>3.关于清除缓存和版本信息，直接调用apicloud里封装好的getCacheSize获取缓存大小，clearCache清楚缓存。以及api.appVersion这个属性值，直接获取appVersion。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//异步返回结果：</span><br><span class="line">api.getCacheSize(function(ret) &#123;</span><br><span class="line">    var size = ret.size;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//同步返回结果：</span><br><span class="line">var size = api.getCacheSize(&#123;</span><br><span class="line">    sync: true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">api.clearCache(function() &#123;</span><br><span class="line">    api.toast(&#123;</span><br><span class="line">        msg: &apos;清除完成&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>4.有时页面跳转会出现传值，页面复用，返回时会进入死循环，（两个页面互相返回），还有时会出现返回后，页面需要reload()，但是reload：true。又不是很好用，有局限性（页面是frame的时候，reload：true不起作用），这系列的页面跳转问题，可以用<code>pageParam:{key:val}</code>的属性，传值给指定页面。刷新问题，可用sendEvent<br>将任意一个自定义事件广播出去，该事件可在任意页面通过 addEventListener 监听收到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">api.sendEvent(&#123;</span><br><span class="line">    name: &apos;myEvent&apos;,</span><br><span class="line">    extra: &#123;</span><br><span class="line">        key1: &apos;value1&apos;,</span><br><span class="line">        key2: &apos;value2&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//html页面a：</span><br><span class="line">api.addEventListener(&#123;</span><br><span class="line">    name: &apos;myEvent&apos;</span><br><span class="line">&#125;, function(ret, err) &#123;</span><br><span class="line">    alert(JSON.stringify(ret.value));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//html页面b：</span><br><span class="line">api.addEventListener(&#123;</span><br><span class="line">    name: &apos;myEvent&apos;</span><br><span class="line">&#125;, function(ret, err) &#123;</span><br><span class="line">    alert(JSON.stringify(ret.value));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>以上，a、b都将收到myEvent的事件，并进行页面的刷新，或者是局部刷新。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/fzddd7315/article/details/71079371&quot; title=&quot;转apicloud总结&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;转apicloud总结&lt;/a&gt;&lt;br&gt;暑假在做apicloud的app，这篇总结写的很好，记一下。&lt;/p&gt;
&lt;p&gt;自己踩过的坑。。做个简单的记录：希望可以帮助有需要的人。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;手机加载日历，由于按业务需要，是要求动态加载input框个数，每个都可以点击触发日历。问题：动态添加进来的元素，点击并不能触发日历。解决：加载input框之前，加载日历插件的js和css，使事件生效。这是我封装的加载js和css的函数，直接调用就好。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>变量作用域</title>
    <link href="http://yoursite.com/2017/06/06/%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2017/06/06/变量作用域/</id>
    <published>2017-06-06T12:04:13.000Z</published>
    <updated>2018-02-05T06:40:20.365Z</updated>
    
    <content type="html"><![CDATA[<p>##一个小小的题目<br>写出下面代码的运行结果:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a,b;</span><br><span class="line">(function()&#123;</span><br><span class="line">    alert(a);</span><br><span class="line">    alert(b);</span><br><span class="line">    var a=b=3;</span><br><span class="line">    alert(a);</span><br><span class="line">    alert(b);</span><br><span class="line">&#125;)();</span><br><span class="line">alert(a);</span><br><span class="line">alert(b);</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>输出结果是什么？</p><blockquote><p>var a,b;  //undefined<br> (function(){<br>     alert(a);   //undefined<br>    alert(b);  //undefined<br>    var a=3;  //局部变量<br>    b=3;  //没有var，全局变量<br>    alert(a);  //3<br>    alert(b);  //3<br>})();<br>alert(a);   //undefined<br>alert(b);   //3</p></blockquote><p>先执行匿名函数里面的语句~答案是undefined undefined 3 3 undefined 3</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##一个小小的题目&lt;br&gt;写出下面代码的运行结果:&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var a,b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var a=b=3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(b);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
